A. Another One Bites The Dust
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Let's call a string good if and only if it consists of only two types of letters — 'a' and 'b' and every two consecutive letters are distinct. For example "baba" and "aba" are good strings and "abb" is a bad string.

You have a strings "a", b strings "b" and c strings "ab". You want to choose some subset of these strings and concatenate them in any arbitrarily order.

What is the length of the longest good string you can obtain this way?

Input
The first line contains three positive integers a, b, c (1≤a,b,c≤109) — the number of strings "a", "b" and "ab" respectively.

Output
Print a single number — the maximum possible length of the good string you can obtain.





B. Born This Way
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Arkady bought an air ticket from a city A to a city C. Unfortunately, there are no direct flights, but there are a lot of flights from A to a city B, and from B to C.

There are n flights from A to B, they depart at time moments a1, a2, a3, ..., an and arrive at B ta moments later.

There are m flights from B to C, they depart at time moments b1, b2, b3, ..., bm and arrive at C tb moments later.

The connection time is negligible, so one can use the i-th flight from A to B and the j-th flight from B to C if and only if bj≥ai+ta.

You can cancel at most k flights. If you cancel a flight, Arkady can not use it.

Arkady wants to be in C as early as possible, while you want him to be in C as late as possible. Find the earliest time Arkady can arrive at C, if you optimally cancel k flights. If you can cancel k or less flights in such a way that it is not possible to reach C at all, print −1.

Input
The first line contains five integers n, m, ta, tb and k (1≤n,m≤2⋅105, 1≤k≤n+m, 1≤ta,tb≤109) — the number of flights from A to B, the number of flights from B to C, the flight time from A to B, the flight time from B to C and the number of flights you can cancel, respectively.

The second line contains n distinct integers in increasing order a1, a2, a3, ..., an (1≤a1<a2<…<an≤109) — the times the flights from A to B depart.

The third line contains m distinct integers in increasing order b1, b2, b3, ..., bm (1≤b1<b2<…<bm≤109) — the times the flights from B to C depart.

Output
If you can cancel k or less flights in such a way that it is not possible to reach C at all, print −1.

Otherwise print the earliest time Arkady can arrive at C if you cancel k flights in such a way that maximizes this time.






C. Crazy Diamond
time limit per test3 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are given a permutation p of integers from 1 to n, where n is an even number.

Your goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:

take two indices i and j such that 2⋅|i−j|≥n and swap pi and pj.
There is no need to minimize the number of operations, however you should use no more than 5⋅n operations. One can show that it is always possible to do that.

Input
The first line contains a single integer n (2≤n≤3⋅105, n is even) — the length of the permutation.

The second line contains n distinct integers p1,p2,…,pn (1≤pi≤n) — the given permutation.

Output
On the first line print m (0≤m≤5⋅n) — the number of swaps to perform.

Each of the following m lines should contain integers ai,bi (1≤ai,bi≤n, |ai−bi|≥n2) — the indices that should be swapped in the corresponding swap.

Note that there is no need to minimize the number of operations. We can show that an answer always exists.





D. Dirty Deeds Done Dirt Cheap
time limit per test3 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are given n pairs of integers (a1,b1),(a2,b2),…,(an,bn). All of the integers in the pairs are distinct and are in the range from 1 to 2⋅n inclusive.

Let's call a sequence of integers x1,x2,…,x2k good if either

x1<x2>x3<…<x2k−2>x2k−1<x2k, or
x1>x2<x3>…>x2k−2<x2k−1>x2k.
You need to choose a subset of distinct indices i1,i2,…,it and their order in a way that if you write down all numbers from the pairs in a single sequence (the sequence would be ai1,bi1,ai2,bi2,…,ait,bit), this sequence is good.

What is the largest subset of indices you can choose? You also need to construct the corresponding index sequence i1,i2,…,it.

Input
The first line contains single integer n (2≤n≤3⋅105) — the number of pairs.

Each of the next n lines contain two numbers — ai and bi (1≤ai,bi≤2⋅n) — the elements of the pairs.

It is guaranteed that all integers in the pairs are distinct, that is, every integer from 1 to 2⋅n is mentioned exactly once.

Output
In the first line print a single integer t — the number of pairs in the answer.

Then print t distinct integers i1,i2,…,it — the indexes of pairs in the corresponding order.






E. Earth Wind and Fire
time limit per test4 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
There are n stones arranged on an axis. Initially the i-th stone is located at the coordinate si. There may be more than one stone in a single place.

You can perform zero or more operations of the following type:

take two stones with indices i and j so that si≤sj, choose an integer d (0≤2⋅d≤sj−si), and replace the coordinate si with (si+d) and replace coordinate sj with (sj−d). In other words, draw stones closer to each other.
You want to move the stones so that they are located at positions t1,t2,…,tn. The order of the stones is not important — you just want for the multiset of the stones resulting positions to be the same as the multiset of t1,t2,…,tn.

Detect whether it is possible to move the stones this way, and if yes, construct a way to do so. You don't need to minimize the number of moves.

Input
The first line contains a single integer n (1≤n≤3⋅105) – the number of stones.

The second line contains integers s1,s2,…,sn (1≤si≤109) — the initial positions of the stones.

The second line contains integers t1,t2,…,tn (1≤ti≤109) — the target positions of the stones.

Output
If it is impossible to move the stones this way, print "NO".

Otherwise, on the first line print "YES", on the second line print the number of operations m (0≤m≤5⋅n) required. You don't have to minimize the number of operations.

Then print m lines, each containing integers i,j,d (1≤i,j≤n, si≤sj, 0≤2⋅d≤sj−si), defining the operations.

One can show that if an answer exists, there is an answer requiring no more than 5⋅n operations.


